Smart Interview Coach: Project Structure & Code

This document contains all the necessary files and instructions to set up the "Smart Interview Coach" project locally. The project is structured as a Next.js application.

1. Project Setup

First, create a new Next.js application and install the required dependencies.

# 1. Create a new Next.js app
npx create-next-app@latest smart-interview-coach
cd smart-interview-coach

# 2. Install Firebase
npm install firebase

# 3. Create the folder structure as outlined below
# For example: mkdir -p components/auth components/candidate components/recruiter components/ui lib


2. Environment Variables

Create a file named .env.local in the root of your project and add your Firebase and Gemini API credentials.

File: .env.local

NEXT_PUBLIC_FIREBASE_API_KEY="YOUR_API_KEY"
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN="YOUR_AUTH_DOMAIN"
NEXT_PUBLIC_FIREBASE_PROJECT_ID="YOUR_PROJECT_ID"
NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET="YOUR_STORAGE_BUCKET"
NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID="YOUR_MESSAGING_SENDER_ID"
NEXT_PUBLIC_FIREBASE_APP_ID="YOUR_APP_ID"

NEXT_PUBLIC_GEMINI_API_KEY="YOUR_GEMINI_API_KEY"


3. Folder Structure

Here is the complete folder structure for the project.

smart-interview-coach/
├── app/
│   ├── layout.js
│   └── page.js
├── components/
│   ├── auth/
│   │   └── AuthPage.js
│   ├── candidate/
│   │   ├── ApplyModal.js
│   │   ├── CandidateDashboard.js
│   │   └── InterviewPage.js
│   ├── recruiter/
│   │   ├── NewJobModal.js
│   │   └── RecruiterDashboard.js
│   └── ui/
│       ├── Button.js
│       ├── Card.js
│       ├── Icons.js
│       └── Modal.js
├── lib/
│   ├── auth.js
│   └── firebase.js
├── .env.local
├── package.json
└── README.md


4. Code for Each File

Copy the code below into the corresponding files you've created.

lib/firebase.js

import { initializeApp, getApps } from 'firebase/app';
import { getAuth } from 'firebase/auth';
import { getFirestore, setLogLevel } from 'firebase/firestore';

const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
};

// Initialize Firebase
let app;
if (!getApps().length) {
  app = initializeApp(firebaseConfig);
} else {
  app = getApps()[0];
}

const auth = getAuth(app);
const db = getFirestore(app);

// Optional: a more robust way to handle initial auth token for server-side rendering or specific environments
const getInitialAuthToken = () => {
    if (typeof window !== 'undefined' && typeof window.__initial_auth_token !== 'undefined') {
        return window.__initial_auth_token;
    }
    return null;
};


// Set log level for debugging
setLogLevel('debug');

export { app, auth, db, getInitialAuthToken };


lib/auth.js

'use client';
import React, { useState, useEffect, createContext, useContext } from 'react';
import { onAuthStateChanged, signInAnonymously, signInWithCustomToken } from 'firebase/auth';
import { doc, getDoc } from 'firebase/firestore';
import { auth, db, getInitialAuthToken } from './firebase';

const AuthContext = createContext(null);

export const AuthProvider = ({ children }) => {
    const [user, setUser] = useState(null);
    const [userData, setUserData] = useState(null);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {
            if (firebaseUser) {
                const userDocRef = doc(db, "users", firebaseUser.uid);
                const userDocSnap = await getDoc(userDocRef);
                if (userDocSnap.exists()) {
                    setUserData(userDocSnap.data());
                }
                setUser(firebaseUser);
            } else {
                setUser(null);
                setUserData(null);
            }
            setLoading(false);
        });

        const handleInitialAuth = async () => {
            const initialToken = getInitialAuthToken();
            if (initialToken) {
                try {
                    await signInWithCustomToken(auth, initialToken);
                } catch (error) {
                    console.error("Error signing in with custom token:", error);
                    await signInAnonymously(auth);
                }
            } else if (!auth.currentUser) {
                await signInAnonymously(auth);
            }
        };

        handleInitialAuth();

        return () => unsubscribe();
    }, []);

    const value = { user, userData, loading };
    return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

export const useAuth = () => useContext(AuthContext);


app/layout.js

import { AuthProvider } from '../lib/auth';
import { Inter } from 'next/font/google';
import './globals.css'; // Assuming you have a globals.css for Tailwind

const inter = Inter({ subsets: ['latin'] });

export const metadata = {
  title: 'Smart Interview Coach',
  description: 'AI-Powered Recruitment Platform',
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <AuthProvider>
            {children}
        </AuthProvider>
      </body>
    </html>
  );
}


app/page.js

'use client';
import React, { useState, useEffect } from 'react';
import { useAuth } from '../lib/auth';
import { auth } from '../lib/firebase';
import { signOut } from 'firebase/auth';

import AuthPage from '../components/auth/AuthPage';
import RecruiterDashboard from '../components/recruiter/RecruiterDashboard';
import CandidateDashboard from '../components/candidate/CandidateDashboard';
import InterviewPage from '../components/candidate/InterviewPage';
import { Spinner } from '../components/ui/Icons';
import Button from '../components/ui/Button';

export default function Home() {
    const { user, userData, loading } = useAuth();
    const [hash, setHash] = useState('');

    useEffect(() => {
        const handleHashChange = () => {
            setHash(window.location.hash);
        };
        // Set initial hash
        handleHashChange();
        window.addEventListener('hashchange', handleHashChange);
        return () => window.removeEventListener('hashchange', handleHashChange);
    }, []);

    const renderContent = () => {
        if (loading) {
            return <div className="flex h-screen items-center justify-center"><Spinner /></div>;
        }

        if (!user || !userData) { // If user is not logged in with a role
            return <AuthPage />;
        }
        
        if (hash.startsWith('#interview/')) {
            const applicationId = hash.split('/')[1];
            return <InterviewPage applicationId={applicationId} />;
        }

        if (userData?.role === 'recruiter') {
            return <RecruiterDashboard />;
        }
        
        return <CandidateDashboard />;
    };

    return (
        <div className="bg-gray-100 min-h-screen font-sans">
            <header className="bg-white shadow-sm">
                <nav className="container mx-auto px-6 py-3 flex justify-between items-center">
                    <div className="text-2xl font-bold text-blue-600">Smart Interview Coach</div>
                    {user && userData && (
                        <div className="flex items-center space-x-4">
                            <span className="text-gray-600">Welcome, {userData.role}!</span>
                            <Button onClick={() => signOut(auth)} className="bg-red-500 hover:bg-red-600 text-sm py-1 px-3">Logout</Button>
                        </div>
                    )}
                </nav>
            </header>
            <main className="container mx-auto px-6 py-8">
                {renderContent()}
            </main>
        </div>
    );
}


Component Files

You will need to create the component files inside the components directory. The code for these remains largely the same as in the original single-file version, but now they import dependencies from other files.

You would continue this pattern, creating a file for each component (AuthPage.js, RecruiterDashboard.js, Button.js, etc.) and pasting the corresponding React component code into it. Make sure to add export default function ComponentName() to each and adjust the import statements at the top of each file to correctly reference other components and hooks.

For brevity, I will show one example of a refactored component.

Example: components/ui/Button.js

import React from 'react';

const Button = ({ children, onClick, className = '', type = 'button', disabled = false }) => (
    <button
        type={type}
        onClick={onClick}
        disabled={disabled}
        className={`px-4 py-2 rounded-md font-semibold text-white transition-colors duration-200 ${disabled ? 'bg-gray-400 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700'} ${className}`}
    >
        {children}
    </button>
);

export default Button;


5. README.md

Finally, create a README.md file in the root of your project.

# Smart Interview Coach

Smart Interview is an AI-driven recruitment platform designed to automate and streamline the candidate evaluation process. The platform integrates large language models (LLMs) to generate advanced interview questions based on job descriptions, enabling accurate skill assessments. Additionally, it automates the analysis and matching of CVs with job offers using natural language processing (NLP).

## Key Features

- **Automate Skill Assessment**: Generate job-specific questions using AI to evaluate candidates' skills with precision.
- **Optimize CV Matching**: Use NLP to match candidate CVs with job descriptions, providing similarity scores to streamline candidate selection.
- **Scale Effortlessly**: Built with a robust Next.js architecture that can scale.
- **Enhance Efficiency**: By automating the key steps in recruitment, such as question generation and CV analysis, the platform reduces manual effort and accelerates the hiring process.

## Tech Stack

- **Framework**: Next.js (React)
- **Styling**: Tailwind CSS
- **Authentication**: Firebase Authentication
- **Database**: Firestore
- **AI**: Google Gemini API

## Getting Started

### Prerequisites

- Node.js (v18 or later)
- npm or yarn
- A Firebase project with Authentication and Firestore enabled.
- A Google Gemini API key.

### Installation

1.  **Clone the repository:**
    ```bash
    git clone <repository-url>
    cd smart-interview-coach
    ```

2.  **Install dependencies:**
    ```bash
    npm install
    ```

3.  **Set up environment variables:**
    Create a `.env.local` file in the project root and add your Firebase and Gemini credentials. See the `.env.example` file for reference.

4.  **Run the development server:**
    ```bash
    npm run dev
    ```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.
