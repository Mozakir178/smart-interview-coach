import React, { useState, useEffect, createContext, useContext } from 'react';

// Firebase Imports (ensure you have these dependencies in a real project)
import { initializeApp } from 'firebase/app';
import { 
    getAuth, 
    onAuthStateChanged, 
    createUserWithEmailAndPassword, 
    signInWithEmailAndPassword, 
    signOut,
    signInAnonymously,
    signInWithCustomToken
} from 'firebase/auth';
import { 
    getFirestore, 
    collection, 
    addDoc, 
    doc, 
    getDoc, 
    getDocs, 
    query, 
    where, 
    setDoc,
    updateDoc,
    onSnapshot
} from 'firebase/firestore';
import { setLogLevel } from 'firebase/firestore';


// --- DUMMY FIREBASE CONFIG ---
// In a real environment, these would be populated by the build tool.
const firebaseConfigStr = typeof __firebase_config !== 'undefined' ? __firebase_config : JSON.stringify({
  apiKey: "YOUR_API_KEY",
  authDomain: "YOUR_AUTH_DOMAIN",
  projectId: "YOUR_PROJECT_ID",
  storageBucket: "YOUR_STORAGE_BUCKET",
  messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
  appId: "YOUR_APP_ID"
});
const firebaseConfig = JSON.parse(firebaseConfigStr);

// --- APP INITIALIZATION ---
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);
setLogLevel('debug'); // For detailed logs in development

// --- AUTHENTICATION CONTEXT ---
const AuthContext = createContext(null);

const AuthProvider = ({ children }) => {
    const [user, setUser] = useState(null);
    const [loading, setLoading] = useState(true);
    const [userData, setUserData] = useState(null);

    useEffect(() => {
        const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {
            if (firebaseUser) {
                const userDocRef = doc(db, "users", firebaseUser.uid);
                const userDocSnap = await getDoc(userDocRef);
                if (userDocSnap.exists()) {
                    setUserData(userDocSnap.data());
                }
                setUser(firebaseUser);
            } else {
                setUser(null);
                setUserData(null);
            }
            setLoading(false);
        });
        
        // Handle initial auth token if provided
        const handleInitialAuth = async () => {
             if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {
                try {
                    await signInWithCustomToken(auth, __initial_auth_token);
                } catch (error) {
                    console.error("Error signing in with custom token:", error);
                    await signInAnonymously(auth);
                }
            } else {
                 await signInAnonymously(auth);
            }
        };

        handleInitialAuth();

        return () => unsubscribe();
    }, []);

    const value = { user, userData, loading };
    return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

const useAuth = () => useContext(AuthContext);

// --- UI COMPONENTS (using TailwindCSS classes) ---

// Icons (simple SVGs for clarity)
const BriefcaseIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" /></svg>;
const UserIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" /></svg>;
const Spinner = () => <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>;
const CheckCircleIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-green-500" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" /></svg>;

// Generic Button Component
const Button = ({ children, onClick, className = '', type = 'button', disabled = false }) => (
    <button
        type={type}
        onClick={onClick}
        disabled={disabled}
        className={`px-4 py-2 rounded-md font-semibold text-white transition-colors duration-200 ${disabled ? 'bg-gray-400 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700'} ${className}`}
    >
        {children}
    </button>
);

// Card Component
const Card = ({ children, className = '' }) => (
    <div className={`bg-white rounded-lg shadow-md p-6 ${className}`}>
        {children}
    </div>
);

// Modal Component
const Modal = ({ isOpen, onClose, title, children }) => {
    if (!isOpen) return null;
    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-center items-center">
            <div className="bg-white rounded-lg shadow-xl w-full max-w-md m-4">
                <div className="p-4 border-b flex justify-between items-center">
                    <h3 className="text-xl font-semibold">{title}</h3>
                    <button onClick={onClose} className="text-gray-500 hover:text-gray-800">&times;</button>
                </div>
                <div className="p-4">{children}</div>
            </div>
        </div>
    );
};

// --- AUTHENTICATION PAGE ---
const AuthPage = () => {
    const [isLogin, setIsLogin] = useState(true);
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [role, setRole] = useState('candidate'); // 'candidate' or 'recruiter'
    const [error, setError] = useState('');
    const [loading, setLoading] = useState(false);

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError('');
        setLoading(true);
        try {
            if (isLogin) {
                await signInWithEmailAndPassword(auth, email, password);
            } else {
                const userCredential = await createUserWithEmailAndPassword(auth, email, password);
                await setDoc(doc(db, "users", userCredential.user.uid), {
                    email: userCredential.user.email,
                    role: role,
                    createdAt: new Date(),
                });
            }
        } catch (err) {
            setError(err.message);
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="min-h-screen flex items-center justify-center bg-gray-50">
            <div className="max-w-md w-full space-y-8 p-10 bg-white shadow-lg rounded-xl">
                <div>
                    <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
                        {isLogin ? 'Sign in to your account' : 'Create a new account'}
                    </h2>
                </div>
                <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
                    {error && <p className="text-red-500 text-sm">{error}</p>}
                    <div className="rounded-md shadow-sm -space-y-px">
                        <div>
                            <input
                                id="email-address"
                                name="email"
                                type="email"
                                autoComplete="email"
                                required
                                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm"
                                placeholder="Email address"
                                value={email}
                                onChange={(e) => setEmail(e.target.value)}
                            />
                        </div>
                        <div>
                            <input
                                id="password"
                                name="password"
                                type="password"
                                autoComplete="current-password"
                                required
                                className={`appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 ${isLogin ? 'rounded-b-md' : ''} focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm`}
                                placeholder="Password"
                                value={password}
                                onChange={(e) => setPassword(e.target.value)}
                            />
                        </div>
                    </div>

                    {!isLogin && (
                        <div className="mt-4">
                            <label className="block text-sm font-medium text-gray-700">I am a:</label>
                            <div className="mt-2 flex items-center space-x-4">
                                <label className="flex items-center">
                                    <input type="radio" name="role" value="candidate" checked={role === 'candidate'} onChange={(e) => setRole(e.target.value)} className="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300" />
                                    <span className="ml-2 text-sm text-gray-900">Candidate</span>
                                </label>
                                <label className="flex items-center">
                                    <input type="radio" name="role" value="recruiter" checked={role === 'recruiter'} onChange={(e) => setRole(e.target.value)} className="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300" />
                                    <span className="ml-2 text-sm text-gray-900">Recruiter</span>
                                </label>
                            </div>
                        </div>
                    )}

                    <div>
                        <Button type="submit" className="w-full flex justify-center" disabled={loading}>
                            {loading ? <Spinner /> : (isLogin ? 'Sign in' : 'Create account')}
                        </Button>
                    </div>
                </form>
                <div className="text-sm text-center">
                    <button onClick={() => setIsLogin(!isLogin)} className="font-medium text-blue-600 hover:text-blue-500">
                        {isLogin ? "Don't have an account? Sign up" : 'Already have an account? Sign in'}
                    </button>
                </div>
            </div>
        </div>
    );
};

// --- RECRUITER DASHBOARD ---
const RecruiterDashboard = () => {
    const { user } = useAuth();
    const [jobs, setJobs] = useState([]);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [selectedJob, setSelectedJob] = useState(null);
    const [applications, setApplications] = useState([]);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        if (!user) return;
        setLoading(true);
        const q = query(collection(db, "jobs"), where("recruiterId", "==", user.uid));
        const unsubscribe = onSnapshot(q, (querySnapshot) => {
            const jobsData = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            setJobs(jobsData);
            setLoading(false);
        }, (error) => {
            console.error("Error fetching jobs:", error);
            setLoading(false);
        });
        return () => unsubscribe();
    }, [user]);

    const handleViewApplicants = async (job) => {
        setSelectedJob(job);
        const q = query(collection(db, "applications"), where("jobId", "==", job.id));
        const querySnapshot = await getDocs(q);
        const appsData = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        setApplications(appsData);
    };

    return (
        <div className="p-8">
            <div className="flex justify-between items-center mb-6">
                <h1 className="text-3xl font-bold">Recruiter Dashboard</h1>
                <Button onClick={() => setIsModalOpen(true)}>Post New Job</Button>
            </div>
            {loading ? <div className="flex justify-center"><Spinner/></div> : (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {jobs.map(job => (
                        <Card key={job.id}>
                            <h2 className="text-xl font-bold">{job.title}</h2>
                            <p className="text-gray-600">{job.company}</p>
                            <p className="mt-2 text-sm text-gray-500 truncate">{job.description}</p>
                            <div className="mt-4">
                                <Button onClick={() => handleViewApplicants(job)} className="w-full text-sm">
                                    View Applicants ({job.applicationCount || 0})
                                </Button>
                            </div>
                        </Card>
                    ))}
                </div>
            )}
            
            <NewJobModal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} />

            {selectedJob && (
                <div className="mt-12">
                    <h2 className="text-2xl font-bold mb-4">Applicants for {selectedJob.title}</h2>
                    {applications.length > 0 ? (
                        <div className="bg-white shadow rounded-lg overflow-hidden">
                            <ul className="divide-y divide-gray-200">
                                {applications.sort((a, b) => (b.matchScore || 0) - (a.matchScore || 0)).map(app => (
                                    <li key={app.id} className="p-4">
                                        <p className="font-semibold">{app.candidateEmail}</p>
                                        <p className="text-sm text-gray-600">CV Match Score: <span className="font-bold text-blue-600">{(app.matchScore * 100).toFixed(2)}%</span></p>
                                        <p className="text-sm text-gray-600">Interview Score: {app.interviewScore !== undefined ? <span className="font-bold text-green-600">{app.interviewScore}%</span> : 'Not taken'}</p>
                                    </li>
                                ))}
                            </ul>
                        </div>
                    ) : <p>No applicants yet.</p>}
                </div>
            )}
        </div>
    );
};

const NewJobModal = ({ isOpen, onClose }) => {
    const { user } = useAuth();
    const [title, setTitle] = useState('');
    const [company, setCompany] = useState('');
    const [description, setDescription] = useState('');
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!user) {
            setError("You must be logged in to post a job.");
            return;
        }
        setLoading(true);
        setError('');
        try {
            // 1. Add job to Firestore
            await addDoc(collection(db, "jobs"), {
                title,
                company,
                description,
                recruiterId: user.uid,
                createdAt: new Date(),
                applicationCount: 0,
            });
            onClose();
        } catch (err) {
            setError(err.message);
        } finally {
            setLoading(false);
        }
    };

    return (
        <Modal isOpen={isOpen} onClose={onClose} title="Post a New Job">
            <form onSubmit={handleSubmit} className="space-y-4">
                {error && <p className="text-red-500 text-sm">{error}</p>}
                <div>
                    <label className="block text-sm font-medium">Job Title</label>
                    <input type="text" value={title} onChange={e => setTitle(e.target.value)} required className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2" />
                </div>
                <div>
                    <label className="block text-sm font-medium">Company</label>
                    <input type="text" value={company} onChange={e => setCompany(e.target.value)} required className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2" />
                </div>
                <div>
                    <label className="block text-sm font-medium">Job Description</label>
                    <textarea value={description} onChange={e => setDescription(e.target.value)} required rows="5" className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"></textarea>
                </div>
                <div className="flex justify-end">
                    <Button type="submit" disabled={loading}>
                        {loading ? <Spinner /> : 'Post Job'}
                    </Button>
                </div>
            </form>
        </Modal>
    );
};


// --- CANDIDATE DASHBOARD ---
const CandidateDashboard = () => {
    const { user } = useAuth();
    const [jobs, setJobs] = useState([]);
    const [loading, setLoading] = useState(true);
    const [applications, setApplications] = useState({});
    const [isApplyModalOpen, setIsApplyModalOpen] = useState(false);
    const [selectedJob, setSelectedJob] = useState(null);

    useEffect(() => {
        setLoading(true);
        const unsubscribeJobs = onSnapshot(collection(db, "jobs"), (snapshot) => {
            const jobsData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            setJobs(jobsData);
            setLoading(false);
        });

        if (user) {
            const q = query(collection(db, "applications"), where("candidateId", "==", user.uid));
            const unsubscribeApps = onSnapshot(q, (snapshot) => {
                const appsData = {};
                snapshot.docs.forEach(doc => {
                    appsData[doc.data().jobId] = {id: doc.id, ...doc.data()};
                });
                setApplications(appsData);
            });
            return () => { unsubscribeJobs(); unsubscribeApps(); };
        }

        return () => unsubscribeJobs();
    }, [user]);

    const handleApplyClick = (job) => {
        setSelectedJob(job);
        setIsApplyModalOpen(true);
    };

    return (
        <div className="p-8">
            <h1 className="text-3xl font-bold mb-6">Available Jobs</h1>
            {loading ? <div className="flex justify-center"><Spinner/></div> : (
                <div className="space-y-4">
                    {jobs.map(job => (
                        <Card key={job.id} className="flex justify-between items-center">
                            <div>
                                <h2 className="text-xl font-bold">{job.title}</h2>
                                <p className="text-gray-600">{job.company}</p>
                            </div>
                            <div>
                                {applications[job.id] ? (
                                    applications[job.id].interviewScore !== undefined ?
                                    <p className="text-green-600 font-semibold">Interview Completed</p>
                                    :
                                    <Button onClick={() => window.location.hash = `#interview/${applications[job.id].id}`}>Start Interview</Button>
                                ) : (
                                    <Button onClick={() => handleApplyClick(job)}>Apply</Button>
                                )}
                            </div>
                        </Card>
                    ))}
                </div>
            )}
            {selectedJob && <ApplyModal isOpen={isApplyModalOpen} onClose={() => setIsApplyModalOpen(false)} job={selectedJob} />}
        </div>
    );
};

const ApplyModal = ({ isOpen, onClose, job }) => {
    const { user } = useAuth();
    const [cvText, setCvText] = useState('');
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');
    const [matchScore, setMatchScore] = useState(null);

    const handleMatchCV = async () => {
        if (!cvText) {
            setError("Please paste your CV.");
            return;
        }
        setLoading(true);
        setError('');
        try {
            // Simplified Keyword Matching
            const jobKeywords = new Set(job.description.toLowerCase().match(/\b(\w+)\b/g));
            const cvKeywords = new Set(cvText.toLowerCase().match(/\b(\w+)\b/g));
            const intersection = new Set([...jobKeywords].filter(x => cvKeywords.has(x)));
            const score = intersection.size / jobKeywords.size;
            setMatchScore(score > 1 ? 1 : score); // Cap score at 100%
        } catch (err) {
            setError("Failed to analyze CV. " + err.message);
        } finally {
            setLoading(false);
        }
    };

    const handleSubmitApplication = async () => {
        if (matchScore === null) {
            setError("Please analyze your CV first.");
            return;
        }
        setLoading(true);
        setError('');
        try {
            // Create application document
            const appRef = await addDoc(collection(db, "applications"), {
                jobId: job.id,
                jobTitle: job.title,
                candidateId: user.uid,
                candidateEmail: user.email,
                cvText,
                matchScore,
                appliedAt: new Date(),
            });

            // Generate interview questions
            const response = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=' + (firebaseConfig.apiKey || 'YOUR_GEMINI_API_KEY'), {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    contents: [{
                        role: "user",
                        parts: [{
                            text: `Based on this job description, create 5 multiple-choice interview questions. Job Description: "${job.description}". Respond ONLY with a JSON array of objects. Each object must have "question" (string), "options" (array of 4 strings), and "answer" (string, one of the options).`
                        }]
                    }]
                })
            });
            const result = await response.json();
            const questionsText = result.candidates[0].content.parts[0].text;
            const questions = JSON.parse(questionsText.replace(/```json|```/g, ''));
            
            await setDoc(doc(db, "interviews", appRef.id), { questions });
            
            // Update application count on job
            const jobRef = doc(db, "jobs", job.id);
            const jobSnap = await getDoc(jobRef);
            await updateDoc(jobRef, { applicationCount: (jobSnap.data().applicationCount || 0) + 1 });

            onClose();
        } catch (err) {
            console.error(err);
            setError("Failed to submit application. " + err.message);
        } finally {
            setLoading(false);
        }
    };

    return (
        <Modal isOpen={isOpen} onClose={onClose} title={`Apply for ${job.title}`}>
            <div className="space-y-4">
                {error && <p className="text-red-500 text-sm">{error}</p>}
                <div>
                    <label className="block text-sm font-medium">Paste your CV/Resume</label>
                    <textarea value={cvText} onChange={e => setCvText(e.target.value)} rows="10" className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"></textarea>
                </div>
                <div className="flex items-center justify-between">
                    <Button onClick={handleMatchCV} disabled={loading || matchScore !== null}>
                        {loading ? <Spinner/> : 'Analyze CV'}
                    </Button>
                    {matchScore !== null && (
                        <div className="text-right">
                            <p className="text-sm">CV Match Score:</p>
                            <p className="text-lg font-bold text-blue-600">{(matchScore * 100).toFixed(2)}%</p>
                        </div>
                    )}
                </div>
                {matchScore !== null && (
                    <div className="pt-4 border-t">
                        <Button onClick={handleSubmitApplication} disabled={loading} className="w-full">
                            {loading ? <Spinner/> : 'Submit Application & Generate Interview'}
                        </Button>
                    </div>
                )}
            </div>
        </Modal>
    );
};

// --- INTERVIEW PAGE ---
const InterviewPage = ({ applicationId }) => {
    const [interview, setInterview] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    const [answers, setAnswers] = useState({});
    const [isSubmitting, setIsSubmitting] = useState(false);

    useEffect(() => {
        const fetchInterview = async () => {
            try {
                const interviewDoc = await getDoc(doc(db, "interviews", applicationId));
                if (interviewDoc.exists()) {
                    setInterview(interviewDoc.data());
                } else {
                    setError("Interview not found.");
                }
            } catch (err) {
                setError("Failed to load interview.");
            } finally {
                setLoading(false);
            }
        };
        fetchInterview();
    }, [applicationId]);

    const handleAnswerSelect = (option) => {
        setAnswers(prev => ({ ...prev, [currentQuestionIndex]: option }));
    };
    
    const handleNext = () => {
        if (currentQuestionIndex < interview.questions.length - 1) {
            setCurrentQuestionIndex(prev => prev + 1);
        }
    };

    const handleSubmit = async () => {
        setIsSubmitting(true);
        try {
            let correctAnswers = 0;
            interview.questions.forEach((q, index) => {
                if (answers[index] === q.answer) {
                    correctAnswers++;
                }
            });
            const score = (correctAnswers / interview.questions.length) * 100;

            await updateDoc(doc(db, "applications", applicationId), {
                interviewAnswers: answers,
                interviewScore: score,
                interviewCompletedAt: new Date(),
            });

            // Navigate to home after submission
            window.location.hash = '#';

        } catch (err) {
            setError("Failed to submit interview.");
        } finally {
            setIsSubmitting(false);
        }
    };

    if (loading) return <div className="p-8 flex justify-center"><Spinner /></div>;
    if (error) return <div className="p-8 text-red-500">{error}</div>;
    if (!interview) return <div className="p-8">No interview data.</div>;

    const currentQuestion = interview.questions[currentQuestionIndex];

    return (
        <div className="p-8 max-w-2xl mx-auto">
            <h1 className="text-3xl font-bold mb-2">Interview</h1>
            <p className="text-gray-600 mb-6">Question {currentQuestionIndex + 1} of {interview.questions.length}</p>
            
            <Card>
                <h2 className="text-xl font-semibold mb-4">{currentQuestion.question}</h2>
                <div className="space-y-3">
                    {currentQuestion.options.map((option, i) => (
                        <label key={i} className={`block p-3 rounded-md border cursor-pointer transition-colors ${answers[currentQuestionIndex] === option ? 'bg-blue-100 border-blue-500' : 'bg-white hover:bg-gray-50'}`}>
                            <input
                                type="radio"
                                name="option"
                                value={option}
                                checked={answers[currentQuestionIndex] === option}
                                onChange={() => handleAnswerSelect(option)}
                                className="sr-only"
                            />
                            {option}
                        </label>
                    ))}
                </div>
            </Card>

            <div className="mt-6 flex justify-between">
                {currentQuestionIndex < interview.questions.length - 1 ? (
                    <Button onClick={handleNext} disabled={!answers[currentQuestionIndex]}>Next</Button>
                ) : (
                    <Button onClick={handleSubmit} disabled={isSubmitting || !answers[currentQuestionIndex]} className="bg-green-600 hover:bg-green-700">
                        {isSubmitting ? <Spinner/> : 'Submit Interview'}
                    </Button>
                )}
            </div>
        </div>
    );
};


// --- MAIN APP COMPONENT ---
export default function App() {
    const [hash, setHash] = useState(window.location.hash);

    useEffect(() => {
        const handleHashChange = () => {
            setHash(window.location.hash);
        };
        window.addEventListener('hashchange', handleHashChange);
        return () => window.removeEventListener('hashchange', handleHashChange);
    }, []);

    const renderContent = () => {
        const { user, userData, loading } = useAuth();
        
        if (loading) {
            return <div className="flex h-screen items-center justify-center"><Spinner /></div>;
        }

        if (!user) {
            return <AuthPage />;
        }
        
        if (hash.startsWith('#interview/')) {
            const applicationId = hash.split('/')[1];
            return <InterviewPage applicationId={applicationId} />;
        }

        if (userData?.role === 'recruiter') {
            return <RecruiterDashboard />;
        }
        
        return <CandidateDashboard />;
    };

    const { user, userData } = useAuth();

    return (
        <AuthProvider>
            <div className="bg-gray-100 min-h-screen font-sans">
                <header className="bg-white shadow-sm">
                    <nav className="container mx-auto px-6 py-3 flex justify-between items-center">
                        <div className="text-2xl font-bold text-blue-600">Smart Interview Coach</div>
                        {useAuth().user && (
                            <div className="flex items-center space-x-4">
                                <span className="text-gray-600">Welcome, {useAuth().userData?.role || 'user'}!</span>
                                <Button onClick={() => signOut(auth)} className="bg-red-500 hover:bg-red-600 text-sm py-1 px-3">Logout</Button>
                            </div>
                        )}
                    </nav>
                </header>
                <main className="container mx-auto px-6 py-8">
                    {renderContent()}
                </main>
            </div>
        </AuthProvider>
    );
}
